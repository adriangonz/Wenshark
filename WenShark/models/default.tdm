ConceptualModel default { 
	/* Usuarios */
	Class User /* Clase base para los usuarios */
	{
		attributes
		{
			private oid id : Autogenerated; /* ID del usuario */
			private name : String; /* Nombre completo del usuario */
			private username : String; /* Nombre de usuario (nick) */
			private email : String; /* Email del usuario */
			private created : Date; /* Fecha de creacion */
		}
		
		operations
		{
			/* Metodos basicos */
			public new::New (p_name : String, p_username : String, p_email : String, p_created : Date) : Object->User;
			public destroy::Destroy (p_oid : OID -> User) : Void;
			public modify::Modifier (p_oid : OID -> User, p_name : String, p_username : String, p_email : String, p_created : Date) : Void;
			
			/* Getters (por ID y todos) */
			public getByID::ReadOID (p_oid : OID -> User) : Object -> User;
			public getAll::ReadAll (/* No arguments */) : List<Object->User>;
			
			/* Busqueda por nombre completo y por username */
			public search::ReadFilter (p_filter : String) : List<Object->User> { filter = "FROM UserEN 
																							WHERE lower(:p_filter) LIKE %lower(username)%
																							OR lower(:p_filter) LIKE %lower(name)%" };
		}
	};
	
	
	Class AppUser extends User /* Usuario registrado en nuestra app */
	{
		attributes
		{
			private password : String; /* Contrasenya del usuario */
		}
		
		operations
		{
			/* Metodos basicos */
			public new::New (p_password : String, p_name : String, p_username : String, p_email : String, p_created : Date) : Object->AppUser;
			public destroy::Destroy (p_oid : OID -> AppUser) : Void;
			public modify::Modifier (p_oid : OID -> AppUser, p_password : String, p_name : String, p_username : String, p_email : String, p_created : Date) : Void;
		}
	};
	
	
	Class OAuthUser extends User /* Usuario registrado mediante OAuth */
	{
		attributes
		{
			private token_oauth : String; /* Token de OAuth del usuario */
		}
		
		operations
		{
			/* Metodos basicos */
			public new::New (p_token_oauth : String, p_name : String, p_username : String, p_email : String, p_created : Date, p_provider : OID -> OAuthProvider) : Object->OAuthUser;
			public destroy::Destroy (p_oid : OID -> OAuthUser) : Void;
			public modify::Modifier (p_oid : OID -> OAuthUser, p_token_oauth : String, p_name : String, p_username : String, p_email : String, p_created : Date) : Void;
		}
	};
	
	
	
	 Class OAuthProvider /* Proveedor de login mediante OAuth (Google, Facebook, etc) */
	 {
	 	attributes
	 	{
	 		private oid id : Autogenerated; /* ID del provider */
	 		private name : String; /* Nombre del provider */
	 		private token_app : String; /* Token de la aplicacion (para hacer peticiones) */
	 	}
	 	
	 	operations
	 	{
	 		/* Metodos basicos */
	 		public new::New (p_name : String, p_token_app : String) : Object->OAuthProvider;
	 		public destroy::Destroy (p_oid : OID -> OAuthProvider) : Void;
	 		public modify::Modifier (p_oid : OID -> OAuthProvider, p_name : String, p_token_app : String) : Void;
	 		
	 		/* Getters (por ID y todos) */
	 		public getByID::ReadOID (p_oid : OID -> OAuthProvider) : Object -> OAuthProvider;
	 		public getAll::ReadAll (/* No arguments */) : List<Object->OAuthProvider>;
	 	}
	 };
	 
	 
 	Association OAuth ( OAuthUser - OAuthProvider )
 	{
 		=> navigable provider ( "1", "1");
 		<= navigable users ( "0", "*");
 	};	
 	
 	/* Canciones y contenido */
 	
 	
 	Class Item /* Item/recurso generico con "contenido" (puede ser una cancion, un artista, un album, etc) */
 	{
 		attributes
 		{
 			private oid id : Autogenerated; /* ID del item (es el mismo para todos) */
 			private name : String; /* Nombre del recurso */
 			private created : Date; /* Fecha de creacion */
 		}
 		
 		operations
 		{
 			/* Metodos basicos */
 			public new::New (p_name : String, p_created : Date) : Object->Item;
 			public destroy::Destroy (p_oid : OID -> Item) : Void;
 			public modify::Modifier (p_oid : OID -> Item, p_name : String, p_created : Date) : Void;
 			
 			/* Getters (por ID y todos) */
 			public getByID::ReadOID (p_oid : OID -> Item) : Object -> Item;
 			public getAll::ReadAll (/* No arguments */) : List<Object->Item>;
 			
 			/* Busqueda por nombre */
 			public search::ReadFilter (p_filter : String) : List<Object->Item> { filter = "FROM ItemEN
																							WHERE lower(:p_filter) LIKE %lower(name)%" };
 		}
 	};
 	
 	Class Genre /* Genero/Etiqueta asociada a un recurso */
 	{
 		attributes
 		{
 			private oid id : Autogenerated; /* ID del genero */
 			private name : String; /* Nombre del genero */
 		}
 		
 		operations
 		{
 			/* Metodos basicos */
 			public new::New (p_name : String) : Object->Genre;
 			public destroy::Destroy (p_oid : OID -> Genre) : Void;
 			public modify::Modifier (p_oid : OID -> Genre, p_name : String) : Void;
 			
 			/* Getters (por ID y todos) */
 			public getByID::ReadOID (p_oid : OID -> Genre) : Object -> Genre;
 			public getAll::ReadAll (/* No arguments */) : List<Object->Genre>;
 		}
 	};
 	
	
	Association ItemGenre ( Item - Genre )
	{
		=> navigable genre ( "0", "*");
		<= navigable item ( "0", "*");
	};
 
 	
 	Class Song extends Item /* Cancion disponible en la plataforma */
 	{
 		attributes
 		{
 			private fname : String; /* Nombre del fichero de la cancion */
 		}
 		
 		operations
 		{
 			/* Metodos basicos */
 			public new::New (p_fname : String, p_name : String, p_created : Date, p_artist : OID -> Artist, p_album : OID -> Album) : Object->Song;
 			public destroy::Destroy (p_oid : OID -> Song) : Void;
 			public modify::Modifier (p_oid : OID -> Song, p_fname : String, p_name : String, p_created : Date) : Void;
 		}
 	};
 	
 	Class Artist extends Item /* Artista dado de alta en la aplicacion */
 	{
 		attributes
 		{
 			private bio: String; /* Biografia/Descripcion del artista */
 			//pais
 			//web oficials
 		}
 		
 		operations
 		{
 			/* Metodos basicos */
 			public new::New (p_bio : String, p_name : String, p_created : Date) : Object->Artist;
 			public destroy::Destroy (p_oid : OID -> Artist) : Void;
 			public modify::Modifier (p_oid : OID -> Artist, p_bio : String, p_name : String, p_created : Date) : Void;
 		}
 	};
 	
 	
 	Association ArtistSong ( Artist - Song )
 	{
 		=> navigable songs ( "0", "*");
 		<= navigable artist ( "1", "1");
 	};
 	
 	Class Album extends Item /* Album de canciones */
 	{
 		attributes
 		{
 			private published:  Date; /* Fecha de publicacion del disco original */
 		}
 		
 		operations
 		{
 			/* Metodos basicos */
 			public new::New (p_published : Date, p_name : String, p_created : Date, p_artist : OID -> Artist) : Object->Album;
 			public destroy::Destroy (p_oid : OID -> Album) : Void;
 			public modify::Modifier (p_oid : OID -> Album, p_published : Date, p_name : String, p_created : Date) : Void;
 		}
 	};
 	
 	
 	Association ArtistAlbum ( Artist - Album )
 	{
 		=> navigable albums ( "0", "*");
 		<= navigable artist ( "1", "1");
 	};
 	
 	
 	Association AlbumSong ( Album - Song )
 	{
 		=> navigable songs ( "0", "*");
 		<= navigable album ( "1", "1");
 	};
 	
}