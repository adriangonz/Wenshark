ConceptualModel default { 
	/* Usuarios */
	Class User 
	{
		attributes
		{
			private oid id : Autogenerated;
			private name : String;
			private username : String;
			private email : String;
		}
		
		operations
		{
			public new::New (p_name : String) : Object->User;
			public destroy::Destroy (p_oid : OID -> User) : Void;
			public modify::Modifier (p_oid : OID -> User, p_name : String) : Void;
		}
	};
	
	
	Class AppUser extends User 
	{
		attributes
		{
			private password : String;
		}
		
		operations
		{
			public new::New (p_name : String) : Object->AppUser;
			public destroy::Destroy (p_oid : OID -> AppUser) : Void;
			public modify::Modifier (p_oid : OID -> AppUser, p_name : String) : Void;
		}
	};
	
	
	Class OAuthUser extends User 
	{
		attributes
		{
			private token_oauth : String;	
		}
		
		operations
		{
			public new::New (p_name : String) : Object->OAuthUser;
			public destroy::Destroy (p_oid : OID -> OAuthUser) : Void;
			public modify::Modifier (p_oid : OID -> OAuthUser, p_name : String) : Void;
		}
	};
	
	
	
	 Class OAuthProvider 
	 {
	 	attributes
	 	{
	 		private oid id : Autogenerated;
	 		private name : String;
	 		private token_app : String;
	 	}
	 	
	 	operations
	 	{
	 		public new::New (p_name : String) : Object->OAuthProvider;
	 		public destroy::Destroy (p_oid : OID -> OAuthProvider) : Void;
	 		public modify::Modifier (p_oid : OID -> OAuthProvider, p_name : String) : Void;
	 	}
	 };
	 
	 
 	Association OAuth ( OAuthUser - OAuthProvider )
 	{
 		=> navigable provider ( "0", "*");
 		<= navigable user ( "1", "1");
 	};	
 	
 	/* Canciones y contenido */
 	
 	
 	Class Item 
 	{
 		attributes
 		{
 			private oid id : Autogenerated;
 			private name : String;
 		}
 		
 		operations
 		{
 			public new::New (p_name : String) : Object->Item;
 			public destroy::Destroy (p_oid : OID -> Item) : Void;
 			public modify::Modifier (p_oid : OID -> Item, p_name : String) : Void;
 		}
 	};
 	
 	Class Genre 
 	{
 		attributes
 		{
 			private oid id : Autogenerated;
 			private name : String;
 			
 		}
 		
 		operations
 		{
 			public new::New (p_name : String) : Object->Genre;
 			public destroy::Destroy (p_oid : OID -> Genre) : Void;
 			public modify::Modifier (p_oid : OID -> Genre, p_name : String) : Void;
 		}
 	};
 	
	
	Association ItemGenre ( Item - Genre )
	{
		=> navigable genre ( "0", "*");
		<= navigable item ( "0", "*");
	};
	
 	
 	
 	Class Song extends Item
 	{
 		attributes
 		{
 			private fname : String;
 		}
 		
 		operations
 		{
 			public new::New (p_name : String) : Object->Song;
 			public destroy::Destroy (p_oid : OID -> Song) : Void;
 			public modify::Modifier (p_oid : OID -> Song, p_name : String) : Void;
 		}
 	};
 	
 	Class Artist extends Item
 	{
 		attributes
 		{
 			private bio: String;
 			//pais
 			//web oficials
 		}
 		
 		operations
 		{
 			public new::New (p_name : String) : Object->Artist;
 			public destroy::Destroy (p_oid : OID -> Artist) : Void;
 			public modify::Modifier (p_oid : OID -> Artist, p_name : String) : Void;
 		}
 	};
 	
 	
 	Association ArtistSong ( Artist - Song )
 	{
 		=> navigable songs ( "0", "*");
 		<= navigable artist ( "1", "1");
 	};
 	
 	Class Album extends Item
 	{
 		attributes
 		{
 			private published:  Date;
 		}
 		
 		operations
 		{
 			public new::New (p_name : String) : Object->Album;
 			public destroy::Destroy (p_oid : OID -> Album) : Void;
 			public modify::Modifier (p_oid : OID -> Album, p_name : String) : Void;
 		}
 	};
 	
 	
 	Association ArtistAlbum ( Artist - Album )
 	{
 		=> navigable albums ( "0", "*");
 		<= navigable artist ( "1", "1");
 	};
 	
 	
 	Association AlbumSong ( Album - Song )
 	{
 		=> navigable songs ( "0", "*");
 		<= navigable album ( "1", "1");
 	};
 	
}